plot_ly(
type = 'bar',
mode = 'markers',
x = ~QUAL,
y = ~POS,
marker = list(size = ~DISEASE.TRAIT, sizeref = 400, sizemode = 'area'),
color = ~ClinicalSignificance,
text = ~SNPS,
hovertemplate = paste(
"<b>%{text}</b><br><br>",
"%{yaxis.title.text}: %{y:$,.0f}<br>",
"%{xaxis.title.text}: %{x:.0%}<br>",
"ClinicalSignificance: %{marker.size:,}",
"<extra></extra>"
)
)
fig
fig <- fig %>%
layout(legend = list(orientation = 'v', y = -0.3))
app = Dash$new()
app$layout(htmlDiv(list(
htmlH1('GENE Cloud Visualisation'),
htmlDiv(list(
htmlP('Downstream for RNAseq'),
htmlP("plots"),
htmlDiv(id = "left-top-graph",
className = "container",
list(htmlDiv(
style = list(width="100%"),
list(
dccGraph(
id="barplot",
figure = fig,
style = list(width = '100%')
)
)
)
))
))
))
)
app%>%run_app()
library(dashHtmlComponents)
library(dash)
library(ggplot2)
library(plotly)
library(plyr)
df <- read.csv('C:\\Users\\Harleen\\Downloads\\ANNOATION.csv')
fig <- plot_ly()
fig <- df %>%
plot_ly(
type = 'bar',
mode = 'markers',
x = ~QUAL,
y = ~POS,
marker = list(size = ~DISEASE.TRAIT, sizeref = 400, sizemode = 'area'),
color = ~ClinicalSignificance,
text = ~SNPS,
hovertemplate = paste(
"<b>%{text}</b><br><br>",
"%{yaxis.title.text}: %{y:$,.0f}<br>",
"%{xaxis.title.text}: %{x:.0%}<br>",
"ClinicalSignificance: %{marker.size:,}",
"<extra></extra>"
)
)
fig
fig <- fig %>%
layout(legend = list(orientation = 'v', y = -0.3))
app = Dash$new()
app$layout(htmlDiv(list(
htmlH1('GENE Cloud Visualisation'),
htmlDiv(list(
htmlP('Downstream for RNAseq'),
htmlP("plots"),
htmlDiv(id = "left-top-graph",
className = "container",
list(htmlDiv(
style = list(width="100%"),
list(
dccGraph(
id="barplot",
figure = fig,
style = list(width = '100%')
)
)
)
))
))
))
)
app%>%run_app()
library(dashHtmlComponents)
library(dash)
library(ggplot2)
library(plotly)
library(plyr)
df <- read.csv('C:\\Users\\Harleen\\Downloads\\ANNOATION.csv')
fig <- plot_ly()
fig <- df %>%
plot_ly(
type = 'bar',
mode = 'markers',
x = ~QUAL,
y = ~POS,
marker = list(size = ~DISEASE.TRAIT, sizeref = 400, sizemode = 'area'),
color = ~ClinicalSignificance,
text = ~SNPS,
hovertemplate = paste(
"<b>%{text}</b><br><br>",
"%{yaxis.title.text}: %{y:$,.0f}<br>",
"%{xaxis.title.text}: %{x:.0%}<br>",
"ClinicalSignificance: %{marker.size:,}",
"<extra></extra>"
)
)
fig
fig <- fig %>%
layout(legend = list(orientation = 'v', y = -0.3))
app = Dash$new()
app$layout(htmlDiv(list(
htmlH1('GENE Cloud Visualisation'),
htmlDiv(list(
htmlP('Downstream for RNAseq'),
htmlP("plots"),
htmlDiv(id = "left-top-graph",
className = "container",
list(htmlDiv(
style = list(width="100%"),
list(
dccGraph(
id="barplot",
figure = fig,
style = list(width = '100%')
)
)
)
))
))
))
)
app%>%run_app()
View(df)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(genefilter)
setwd("C:\\Users\\Harleen\\Downloads\\Task1\\Task1")
metadata<-read.table("../Downloads/Task1/Task1/Count_data.csv",header = TRUE,sep="\t")
metadata<-read.table("../Downloads/Task1/Task1/Count_data.csv",header = TRUE,)
metadata<-read.table("../Downloads/Task1/Task1/Count_data.csv",header = TRUE)
metadata<-read.csv("../Downloads/Task1/Task1/Count_data.csv",header = TRUE)
metadata<-read.csv("../Downloads/Task1/Task1/Count_data.csv",header = TRUE,)
meta<-read.csv("../Downloads/Task1/Task1/Count_data.csv",header = TRUE, )
meta<-read.csv("Count_data.csv",header = TRUE, )
View(meta)
countdata<-read.csv("Count_data.csv",header = TRUE, )
countdata
metadata<-read.csv("Metadata.csv",header = TRUE, )
countdata
metadata<-read.csv("Metadata.csv",header = TRUE, )
metadata
deseq2Data <- DESeqDataSetFromMatrix(countData=countData, colData=countData, design= ~ condition)
deseq2Data <- DESeqDataSetFromMatrix(countData=countdata, colData=countdata, design= ~ condition)
View(countdata)
count<-countData[,2:9]
count<-countdata[,2:9]
count<-countdata[,2:8]
counts<-countdata[,2:8]
deseq2Data <- DESeqDataSetFromMatrix(countData=counts, colData=counts, design= ~ condition)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(genefilter)
setwd("C:\\Users\\Harleen\\Downloads\\Task1\\Task1")
countdata<-read.csv("Count_data.csv",header = TRUE, )
countdata
metadata<-read.csv("Metadata.csv",header = TRUE, )
metadata
counts<-countdata[,2:8]
deseq2Data <- DESeqDataSetFromMatrix(countData=counts, colData=counts, design= ~ condition)
mat <- countdata[,-1]
rownames(mat) <- countdata[,1]
deseq2Data <- DESeqDataSetFromMatrix(countData=counts, colData=counts, design= ~ condition)
deseq2Data <- DESeqDataSetFromMatrix(countData=countdata, colData=countdata, design= ~ condition)
mat <- countdata[,-1]
rownames(mat) <- countdata[,1]
deseq2Data <- DESeqDataSetFromMatrix(countData=countdata, colData=metadata, design= ~ condition)
deseq2Data <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dim(dd)
rownames(counts) <- countData[,1]
row.names(counts)<-rownames(countdata$X, do.NULL = TRUE, prefix = "row")]
counts<-countdata[,2:8]
row.names(counts)<-rownames(countdata$X, do.NULL = TRUE, prefix = "row")]
row.names(counts) <- countData[,1]
countdata<-read.csv("Count_data.csv",header = TRUE, )
countdata
metadata<-read.csv("Metadata.csv",header = TRUE, )
metadata
counts<-countdata[,2:8]
row.names(counts) <- countData[,1]
row.names(counts) <- countdata[,1]
row.names(counts) <- countdata[,1]
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dim(dd)
dim(dd[rowSums(counts(dd)) > 10, ])
plotPCA(dd)
dds<-DESeq(dd)
dds
re<-results(dds,alpha = 0.05)
re
summary(re)
dd<-dim(dd[rowSums(counts(dd)) > 10, ])
dds<-DESeq(dd)
dd
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dim(dd)
dd<-dim(dd[rowSums(counts(dd)) > 10, ])
dd<-(dd[rowSums(counts(dd)) > 10, ])
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dd <- dds[ rowSums(counts(dds)) > 10, ]
dd
dds<-DESeq(dd)
dds
re<-results(dds,alpha = 0.05)
re
summary(re)
vsd <- vst(dd, blind = FALSE)
colData(vsd)
plotPCA(vsd, intgroup="dex")
counts(vsd)
vsd <- vst(dd, blind = FALSE)
counts(vsd)
plotPCA(vsd, intgroup="dex")
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dd <- dds[ rowSums(counts(dds)) > 10, ]
dd
ddse <- estimateSizeFactors(dd)
# shifted log of normalized counts
se <- SummarizedExperiment(log2(counts(ddse, normalized=TRUE) + 1),
colData=colData(ddse))
# the call to DESeqTransform() is needed to
# trigger our plotPCA method.
plotPCA( DESeqTransform( se ) )
dds<-DESeq(dd)
dds
re<-results(dds,alpha = 0.05)
re
summary(re)
deseq2Results <- results(dds, contrast=c("dht","mock"))
deseq2Results <- results(dds, contrast=c("dht","mock")
deseq2Results <- results(dds, contrast=c("dht","mock"))
dds<-DESeq(dd)
dds
deseq2Results <- results(dds, contrast=c("mock","dht"))
results(dds, contrast=c("mock","dht"))
results(dds, contrast=c("group", "mock","dht"))
View(metadata)
results(dds, contrast=c("X", "mock","dht"))
dds$group <- factor(paste0(dds$X, dds$condition))
results(dds, contrast=c("group", "mock","dht"))
design(dds) <- ~ group
dds <- DESeq(dds)
resultsNames(dds)
results(dds, contrast=c("group", "mock", "dht"))
dds <- DESeq(dds)
resultsNames(dds)
dds<-DESeq(dd)
dds
deseq2Results <- results(dds, contrast=c("mock","dht"))
results(dds, contrast=c("condition", "mock", "dht"))
deseq_results<-results(dds, contrast=c("condition", "mock", "dht"))
write.csv(deseq_results,"deseq_results.csv")
library(htmltools)
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(genefilter)
setwd("C:\\Users\\Harleen\\Desktop\\genomage\\deseq\\data")
metadata<-read.table("../Downloads/metadata_1.txt",header = TRUE,sep="\t")
meta<-read.csv("airway_metadata.csv",header = TRUE, )
meta
count2<-read.table("C:\\Users\\Harleen\\Downloads\\count_s.tsv", header = TRUE, sep="\t")
count2
dds<-DESeq(dds)
dds
normcounts<-counts(dds,normalized=TRUE, )
row.names(normcounts)<-rownames(normcounts, do.NULL = TRUE, prefix = "row")
write.csv(normcounts,"normalized_counts.csv")
res<-results(dds,alpha = 0.05)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(genefilter)
setwd("C:\\Users\\Harleen\\Desktop\\genomage\\deseq\\data")
meta<-read.csv("airway_metadata.csv",header = TRUE, )
meta
count2<-read.table("C:\\Users\\Harleen\\Downloads\\count_s.tsv", header = TRUE, sep="\t")
count2
dds<-DESeq(dds)
library(htmltools)
library(DESeq2)
library(ggplot2)
library(pheatmap)
setwd("C:\\Users\\Harleen\\Desktop\\genomage\\deseq\\data")
meta<-read.csv("airway_metadata.csv",header = TRUE, )
meta
count2<-read.table("C:\\Users\\Harleen\\Downloads\\count_s.tsv", header = TRUE, sep="\t")
count2
dd<-DESeqDataSetFromMatrix(count,meta,design=~dex,tidy = TRUE)
dd<-DESeqDataSetFromMatrix(count2,meta,design=~dex,tidy = TRUE)
dd<-DESeq(dd)
dd
normc<-counts(dd,normalized=TRUE)
re<-results(dd,alpha = 0.05)
vsd <- vst(dd, blind = FALSE)
colData(vsd)
plotPCA(vsd, intgroup="dex") #using the DESEQ2 plotPCA fxn we can
metadata<-read.csv("Metadata.csv",header = TRUE, )
metadata
counts<-countdata[,2:8]
row.names(counts) <- countdata[,1]
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dim(dd)
dd <- dds[ rowSums(counts(dds)) > 10, ]
dd
ddse <- estimateSizeFactors(dd)
library(DESeq2)
setwd("C:\\Users\\Harleen\\Downloads\\Task1\\Task1")
countdata<-read.csv("Count_data.csv",header = TRUE, )
countdata
metadata<-read.csv("Metadata.csv",header = TRUE, )
metadata
counts<-countdata[,2:8]
row.names(counts) <- countdata[,1]
dd <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~ condition)
dim(dd)
dd <- dds[ rowSums(counts(dds)) > 10, ]
dd
ddse <- estimateSizeFactors(dd)
se <- SummarizedExperiment(log2(counts(ddse, normalized=TRUE) + 1),
colData=colData(ddse))
# the call to DESeqTransform() is needed to
# trigger our plotPCA method.
plotPCA( DESeqTransform( se ) )
library(plotly)
fig <- plot_ly(type = 'scatter', mode = 'markers')
fig <- fig %>%
add_trace(
x = c(1:5),
y = rnorm(5, mean = 5),
text = c("Text A", "Text B", "Text C", "Text D", "Text E"),
hoverinfo = 'text',
marker = list(color='green'),
showlegend = F
)
fig
fig <- plot_ly(type = 'scatter', mode = 'markers')
fig <- fig %>%
add_trace(
x = c(1:100),
y = rnorm(100, mean = 5),
marker = list(color='green'),
hoverinfo = 'y',
showlegend = F
)
fig <- fig %>%
layout(
title = list(text="Set hover text formatting<br><a href= https://github.com/d3/d3-time-format/blob/master/README.md#locale_format>https://github.com/d3/d3-time-format/blob/master/README.md#locale_format</a>",
size = 10),
xaxis = list(zeroline = F),
yaxis = list(hoverformat = '.2f'))
fig
# the call to DESeqTransform() is needed to
# trigger our plotPCA method.
plotPCA( DESeqTransform( se ) )
library(plotly)
fig <- plot_ly(type = 'scatter', mode = 'markers')
fig <- fig %>%
add_trace(
x = c(1:100),
y = rnorm(100, mean = 5),
marker = list(color='green'),
hoverinfo = 'y',
showlegend = F
)
fig <- fig %>%
layout(
title = list(text="Set hover text formatting<br><a href= https://github.com/d3/d3-time-format/blob/master/README.md#locale_format>genes</a>",
size = 10),
xaxis = list(zeroline = F),
yaxis = list(hoverformat = '.2f'))
fig
library(plotly)
library(ggfortify)
install.packages("ggfortify")
library(plotly)
library(ggfortify)
df <- iris[1:4]
pca_res <- prcomp(df, scale. = TRUE)
p <- autoplot(pca_res, data = iris, colour = 'Species', label = TRUE, label.size = 3)
ggplotly(p)
library(plotly)
library(stats)
data(iris)
X <- subset(iris, select = -c(Species))
prin_comp <- prcomp(X, rank. = 2)
components <- prin_comp[["x"]]
components <- data.frame(components)
components <- cbind(components, iris$Species)
components$PC2 <- -components$PC2
df <- iris[1:4]
pca_res <- prcomp(df, scale. = TRUE)
fig <- autoplot(pca_res, data = iris, colour = 'Species', label = TRUE, label.size = 3)
ggplotly(fig)
fig
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(
htmlDiv(
list(
dccGraph(figure=fig)
)
)
)
app%>%run_app()
fig
fig
app <- Dash$new()
app$layout(
htmlDiv(
list(
dccGraph(figure=fig)
)
)
)
app%>%run_app()
fig <- plot_ly(components, x = ~PC1, y = ~PC2, color = ~iris$Species, colors = c('#636EFA','#EF553B','#00CC96'), type = 'scatter', mode = 'markers')%>%
layout(
legend=list(title=list(text='color')),
plot_bgcolor='#e5ecf6',
xaxis = list(
title = "0",
zerolinecolor = "#ffff",
zerolinewidth = 2,
gridcolor='#ffff'),
yaxis = list(
title = "1",
zerolinecolor = "#ffff",
zerolinewidth = 2,
gridcolor='#ffff'))
fig
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(
htmlDiv(
list(
dccGraph(figure=fig)
)
)
)
app%>%run_app()
library(plotly)
set.seed(1)
mat <- matrix(rnorm(50*10),nrow=50,ncol=10,dimnames=list(paste("C",1:50,sep="."),paste("G",1:10,sep=".")))
conditions.text <- paste(paste("C",1:50,sep="."),rep(paste(LETTERS[sample(26,10,replace=T)],collapse=""),500),sep=":")
conditions.text <- matrix(unlist(conditions.text), ncol = 10, byrow = TRUE)
fig<-plot_ly(z=mat,
type="heatmap",
hoverinfo='text',
text=conditions.text)
fig
fig<-plot_ly(z=mat,
type="heatmap",
hoverinfo='sample',
text=conditions.text)
fig<-plot_ly(z=mat,
type="heatmap",
hoverinfo='sample',
text=conditions.text)
fig
app <- Dash$new()
app$layout(
htmlDiv(
list(
dccGraph(figure=fig)
)
)
)
app%>%run_app()
library(plotly)
fig<-plot_ly(z=matis,
type="heatmap",
hoverinfo='sample',
text=conditions.text)
fig<-plot_ly(z=histogram,
type="heatmap",
hoverinfo='sample',
text=conditions.text)
fig<-plot_ly(z=volcano,
type="heatmap",
hoverinfo='sample',
text=conditions.text)
fig
